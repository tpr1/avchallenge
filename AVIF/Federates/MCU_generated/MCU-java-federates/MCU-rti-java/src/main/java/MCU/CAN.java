// This file was generated by the WebGME Federates Exporter plugin. Do not edit manually!

package MCU;

import java.util.HashSet;
import java.util.Set;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.cpswt.utils.CpswtUtils;

import hla.rti.AttributeHandleSet;
import hla.rti.FederateNotExecutionMember;
import hla.rti.LogicalTime;
import hla.rti.NameNotFound;
import hla.rti.ObjectClassNotDefined;
import hla.rti.ObjectClassNotPublished;
import hla.rti.ObjectClassNotSubscribed;
import hla.rti.RTIambassador;
import hla.rti.ReflectedAttributes;
import hla.rti.SuppliedAttributes;

import org.cpswt.hla.*;

/**
* Implements ObjectRoot.CAN
*/
public class CAN extends ObjectRoot {

    private static final Logger logger = LogManager.getLogger();

    /**
    * Creates an instance of the CAN object class with default attribute values.
    */
    public CAN() {}

    private static int _11BiD_handle;
    private static int _18BiD_handle;
    private static int _ACKslot_handle;
    private static int _CRC_handle;
    private static int _DLC_handle;
    private static int _DataField_handle;
    private static int _EndOfFrame_handle;
    private static int _IDE_handle;
    private static int _IFS_handle;
    private static int _RTR_handle;
    private static int _ReservedBit1_handle;
    private static int _ReservedBit2_handle;
    private static int _SRR_handle;
    private static int _StartOfFrame_handle;

    private static boolean _isInitialized = false;

    private static int _handle;

    /**
    * Returns the handle (RTI assigned) of the CAN object class.
    * Note: As this is a static method, it is NOT polymorphic, and so, if called on
    * a reference will return the handle of the class pertaining to the reference,
    * rather than the handle of the class for the instance referred to by the reference.
    * For the polymorphic version of this method, use {@link #getClassHandle()}.
    *
    * @return the RTI assigned integer handle that represents this object class
    */
    public static int get_handle() {
        return _handle;
    }

    /**
    * Returns the fully-qualified (dot-delimited) name of the CAN object class.
    * Note: As this is a static method, it is NOT polymorphic, and so, if called on
    * a reference will return the name of the class pertaining to the reference,
    * rather than the name of the class for the instance referred to by the reference.
    * For the polymorphic version of this method, use {@link #getClassName()}.
    *
    * @return the fully-qualified HLA class path for this object class
    */
    public static String get_class_name() {
        return "ObjectRoot.CAN";
    }

    /**
    * Returns the simple name (the last name in the dot-delimited fully-qualified
    * class name) of the CAN object class.
    *
    * @return the name of this object class
    */
    public static String get_simple_class_name() {
        return "CAN";
    }

    private static Set< String > _datamemberNames = new HashSet< String >();
    private static Set< String > _allDatamemberNames = new HashSet< String >();

    /**
    * Returns a set containing the names of all of the non-hidden attributes in the
    * CAN object class.
    * Note: As this is a static method, it is NOT polymorphic, and so, if called on
    * a reference will return a set of parameter names pertaining to the reference,
    * rather than the parameter names of the class for the instance referred to by
    * the reference.  For the polymorphic version of this method, use
    * {@link #getAttributeNames()}.
    *
    * @return a modifiable set of the non-hidden attribute names for this object class
    */
    public static Set< String > get_attribute_names() {
        return new HashSet< String >(_datamemberNames);
    }

    /**
    * Returns a set containing the names of all of the attributes in the
    * CAN object class.
    * Note: As this is a static method, it is NOT polymorphic, and so, if called on
    * a reference will return a set of parameter names pertaining to the reference,
    * rather than the parameter names of the class for the instance referred to by
    * the reference.  For the polymorphic version of this method, use
    * {@link #getAttributeNames()}.
    *
    * @return a modifiable set of the attribute names for this object class
    */
    public static Set< String > get_all_attribute_names() {
        return new HashSet< String >(_allDatamemberNames);
    }

    private static Set< String > _publishAttributeNameSet = new HashSet< String >();
    private static Set< String > _subscribeAttributeNameSet = new HashSet< String >();

    static {
        _classNameSet.add("ObjectRoot.CAN");
        _classNameClassMap.put("ObjectRoot.CAN", CAN.class);

        _datamemberClassNameSetMap.put("ObjectRoot.CAN", _datamemberNames);
        _allDatamemberClassNameSetMap.put("ObjectRoot.CAN", _allDatamemberNames);

        _datamemberNames.add("11BiD");
        _datamemberNames.add("18BiD");
        _datamemberNames.add("ACKslot");
        _datamemberNames.add("CRC");
        _datamemberNames.add("DLC");
        _datamemberNames.add("DataField");
        _datamemberNames.add("EndOfFrame");
        _datamemberNames.add("IDE");
        _datamemberNames.add("IFS");
        _datamemberNames.add("RTR");
        _datamemberNames.add("ReservedBit1");
        _datamemberNames.add("ReservedBit2");
        _datamemberNames.add("SRR");
        _datamemberNames.add("StartOfFrame");

        _datamemberTypeMap.put("11BiD", "String");
        _datamemberTypeMap.put("18BiD", "String");
        _datamemberTypeMap.put("ACKslot", "boolean");
        _datamemberTypeMap.put("CRC", "String");
        _datamemberTypeMap.put("DLC", "String");
        _datamemberTypeMap.put("DataField", "String");
        _datamemberTypeMap.put("EndOfFrame", "String");
        _datamemberTypeMap.put("IDE", "String");
        _datamemberTypeMap.put("IFS", "String");
        _datamemberTypeMap.put("RTR", "boolean");
        _datamemberTypeMap.put("ReservedBit1", "boolean");
        _datamemberTypeMap.put("ReservedBit2", "boolean");
        _datamemberTypeMap.put("SRR", "boolean");
        _datamemberTypeMap.put("StartOfFrame", "boolean");

        _allDatamemberNames.add("11BiD");
        _allDatamemberNames.add("18BiD");
        _allDatamemberNames.add("ACKslot");
        _allDatamemberNames.add("CRC");
        _allDatamemberNames.add("DLC");
        _allDatamemberNames.add("DataField");
        _allDatamemberNames.add("EndOfFrame");
        _allDatamemberNames.add("IDE");
        _allDatamemberNames.add("IFS");
        _allDatamemberNames.add("RTR");
        _allDatamemberNames.add("ReservedBit1");
        _allDatamemberNames.add("ReservedBit2");
        _allDatamemberNames.add("SRR");
        _allDatamemberNames.add("StartOfFrame");

        _classNamePublishAttributeNameMap.put("ObjectRoot.CAN", _publishAttributeNameSet);
        _classNameSubscribeAttributeNameMap.put("ObjectRoot.CAN", _subscribeAttributeNameSet);
    }

    protected static void init(RTIambassador rti) {
        if (_isInitialized) return;
        _isInitialized = true;

        ObjectRoot.init(rti);

        boolean isNotInitialized = true;
        while(isNotInitialized) {
            try {
                _handle = rti.getObjectClassHandle("ObjectRoot.CAN");
                isNotInitialized = false;
            } catch (FederateNotExecutionMember e) {
                logger.error("could not initialize: Federate Not Execution Member", e);
                return;
            } catch (NameNotFound e) {
                logger.error("could not initialize: Name Not Found", e);
                return;
            } catch (Exception e) {
                logger.error(e);
                CpswtUtils.sleepDefault();
            }
        }

        _classNameHandleMap.put("ObjectRoot.CAN", get_handle());
        _classHandleNameMap.put(get_handle(), "ObjectRoot.CAN");
        _classHandleSimpleNameMap.put(get_handle(), "CAN");

        isNotInitialized = true;
        while(isNotInitialized) {
            try {
                _11BiD_handle = rti.getAttributeHandle("11BiD", get_handle());
                _18BiD_handle = rti.getAttributeHandle("18BiD", get_handle());
                _ACKslot_handle = rti.getAttributeHandle("ACKslot", get_handle());
                _CRC_handle = rti.getAttributeHandle("CRC", get_handle());
                _DLC_handle = rti.getAttributeHandle("DLC", get_handle());
                _DataField_handle = rti.getAttributeHandle("DataField", get_handle());
                _EndOfFrame_handle = rti.getAttributeHandle("EndOfFrame", get_handle());
                _IDE_handle = rti.getAttributeHandle("IDE", get_handle());
                _IFS_handle = rti.getAttributeHandle("IFS", get_handle());
                _RTR_handle = rti.getAttributeHandle("RTR", get_handle());
                _ReservedBit1_handle = rti.getAttributeHandle("ReservedBit1", get_handle());
                _ReservedBit2_handle = rti.getAttributeHandle("ReservedBit2", get_handle());
                _SRR_handle = rti.getAttributeHandle("SRR", get_handle());
                _StartOfFrame_handle = rti.getAttributeHandle("StartOfFrame", get_handle());
                isNotInitialized = false;
            } catch (FederateNotExecutionMember e) {
                logger.error("could not initialize: Federate Not Execution Member", e);
                return;
            } catch (ObjectClassNotDefined e) {
                logger.error("could not initialize: Object Class Not Defined", e);
                return;
            } catch (NameNotFound e) {
                logger.error("could not initialize: Name Not Found", e);
                return;
            } catch (Exception e) {
                logger.error(e);
                CpswtUtils.sleepDefault();
            }
        }

        _datamemberNameHandleMap.put("ObjectRoot.CAN.11BiD", _11BiD_handle);
        _datamemberNameHandleMap.put("ObjectRoot.CAN.18BiD", _18BiD_handle);
        _datamemberNameHandleMap.put("ObjectRoot.CAN.ACKslot", _ACKslot_handle);
        _datamemberNameHandleMap.put("ObjectRoot.CAN.CRC", _CRC_handle);
        _datamemberNameHandleMap.put("ObjectRoot.CAN.DLC", _DLC_handle);
        _datamemberNameHandleMap.put("ObjectRoot.CAN.DataField", _DataField_handle);
        _datamemberNameHandleMap.put("ObjectRoot.CAN.EndOfFrame", _EndOfFrame_handle);
        _datamemberNameHandleMap.put("ObjectRoot.CAN.IDE", _IDE_handle);
        _datamemberNameHandleMap.put("ObjectRoot.CAN.IFS", _IFS_handle);
        _datamemberNameHandleMap.put("ObjectRoot.CAN.RTR", _RTR_handle);
        _datamemberNameHandleMap.put("ObjectRoot.CAN.ReservedBit1", _ReservedBit1_handle);
        _datamemberNameHandleMap.put("ObjectRoot.CAN.ReservedBit2", _ReservedBit2_handle);
        _datamemberNameHandleMap.put("ObjectRoot.CAN.SRR", _SRR_handle);
        _datamemberNameHandleMap.put("ObjectRoot.CAN.StartOfFrame", _StartOfFrame_handle);

        _datamemberHandleNameMap.put(_11BiD_handle, "11BiD");
        _datamemberHandleNameMap.put(_18BiD_handle, "18BiD");
        _datamemberHandleNameMap.put(_ACKslot_handle, "ACKslot");
        _datamemberHandleNameMap.put(_CRC_handle, "CRC");
        _datamemberHandleNameMap.put(_DLC_handle, "DLC");
        _datamemberHandleNameMap.put(_DataField_handle, "DataField");
        _datamemberHandleNameMap.put(_EndOfFrame_handle, "EndOfFrame");
        _datamemberHandleNameMap.put(_IDE_handle, "IDE");
        _datamemberHandleNameMap.put(_IFS_handle, "IFS");
        _datamemberHandleNameMap.put(_RTR_handle, "RTR");
        _datamemberHandleNameMap.put(_ReservedBit1_handle, "ReservedBit1");
        _datamemberHandleNameMap.put(_ReservedBit2_handle, "ReservedBit2");
        _datamemberHandleNameMap.put(_SRR_handle, "SRR");
        _datamemberHandleNameMap.put(_StartOfFrame_handle, "StartOfFrame");
    }

    private static boolean _isPublished = false;

    /**
    * Publishes the CAN object class for a federate.
    *
    * @param rti handle to the Local RTI Component
    */
    public static void publish(RTIambassador rti) {
        if (_isPublished) return;

        init(rti);

        AttributeHandleSet publishedAttributeHandleSet = _factory.createAttributeHandleSet();
        for(String attributeName : _publishAttributeNameSet) {
            try {
                publishedAttributeHandleSet.add(_datamemberNameHandleMap.get("ObjectRoot.CAN." + attributeName));
                logger.trace("publish {}:{}", get_class_name(), attributeName);
            } catch (Exception e) {
                logger.error("could not publish \"" + attributeName + "\" attribute.", e);
            }
        }

        synchronized(rti) {
            boolean isNotPublished = true;
            while(isNotPublished) {
                try {
                    rti.publishObjectClass(get_handle(), publishedAttributeHandleSet);
                    isNotPublished = false;
                } catch (FederateNotExecutionMember e) {
                    logger.error("could not publish: Federate Not Execution Member", e);
                    return;
                } catch (ObjectClassNotDefined e) {
                    logger.error("could not publish: Object Class Not Defined", e);
                    return;
                } catch (Exception e) {
                    logger.error(e);
                    CpswtUtils.sleepDefault();
                }
            }
        }

        _isPublished = true;
        logger.debug("publish: {}", get_class_name());
    }

    /**
    * Unpublishes the CAN object class for a federate.
    *
    * @param rti handle to the Local RTI Component
    */
    public static void unpublish(RTIambassador rti) {
        if (!_isPublished) return;

        init(rti);

        synchronized(rti) {
            boolean isNotUnpublished = true;
            while(isNotUnpublished) {
                try {
                    rti.unpublishObjectClass(get_handle());
                    isNotUnpublished = false;
                } catch (FederateNotExecutionMember e) {
                    logger.error("could not unpublish: Federate Not Execution Member", e);
                    return;
                } catch (ObjectClassNotDefined e) {
                    logger.error("could not unpublish: Object Class Not Defined", e);
                    return;
                } catch (ObjectClassNotPublished e) {
                    logger.error("could not unpublish: Object Class Not Published", e);
                    return;
                } catch (Exception e) {
                    logger.error(e);
                    CpswtUtils.sleepDefault();
                }
            }
        }

        _isPublished = false;
        logger.debug("unpublish: {}", get_class_name());
    }

    private static boolean _isSubscribed = false;

    /**
    * Subscribes a federate to the CAN object class.
    *
    * @param rti handle to the Local RTI Component
    */
    public static void subscribe(RTIambassador rti) {
        if (_isSubscribed) return;

        init(rti);

        AttributeHandleSet subscribedAttributeHandleSet = _factory.createAttributeHandleSet();
        for(String attributeName : _subscribeAttributeNameSet) {
            try {
                subscribedAttributeHandleSet.add(_datamemberNameHandleMap.get("ObjectRoot.CAN." + attributeName));
                logger.trace("subscribe {}:{}", get_class_name(), attributeName);
            } catch (Exception e) {
                logger.error("could not subscribe to \"" + attributeName + "\" attribute.", e);
            }
        }

        synchronized(rti) {
            boolean isNotSubscribed = true;
            while(isNotSubscribed) {
                try {
                    rti.subscribeObjectClassAttributes(get_handle(), subscribedAttributeHandleSet);
                    isNotSubscribed = false;
                } catch (FederateNotExecutionMember e) {
                    logger.error("could not subscribe: Federate Not Execution Member", e);
                    return;
                } catch (ObjectClassNotDefined e) {
                    logger.error("could not subscribe: Object Class Not Defined", e);
                    return;
                } catch (Exception e) {
                    logger.error(e);
                    CpswtUtils.sleepDefault();
                }
            }
        }

        _isSubscribed = true;
        logger.debug("subscribe: {}", get_class_name());
    }

    /**
    * Unsubscribes a federate from the CAN object class.
    *
    * @param rti handle to the Local RTI Component
    */
    public static void unsubscribe(RTIambassador rti) {
        if (!_isSubscribed) return;

        init(rti);

        synchronized(rti) {
            boolean isNotUnsubscribed = true;
            while(isNotUnsubscribed) {
                try {
                    rti.unsubscribeObjectClass(get_handle());
                    isNotUnsubscribed = false;
                } catch (FederateNotExecutionMember e) {
                    logger.error("could not unsubscribe: Federate Not Execution Member", e);
                    return;
                } catch (ObjectClassNotDefined e) {
                    logger.error("could not unsubscribe: Object Class Not Defined", e);
                    return;
                } catch (ObjectClassNotSubscribed e) {
                    logger.error("could not unsubscribe: Object Class Not Subscribed", e);
                    return;
                } catch (Exception e) {
                    logger.error(e);
                    CpswtUtils.sleepDefault();
                }
            }
        }

        _isSubscribed = false;
        logger.debug("unsubscribe: {}", get_class_name());
    }

    /**
    * Return true if "handle" is equal to the handle (RTI assigned) of this class
    * (that is, the CAN object class).
    *
    * @param handle handle to compare to the value of the handle (RTI assigned) of
    * this class (the CAN object class).
    * @return "true" if "handle" matches the value of the handle of this class
    * (that is, the CAN object class).
    */
    public static boolean match(int handle) {
        return handle == get_handle();
    }

    /**
    * Returns the handle (RTI assigned) of this instance's object class .
    *
    * @return the handle (RTI assigned) if this instance's object class
    */
    public int getClassHandle() {
        return get_handle();
    }

    /**
    * Returns the fully-qualified (dot-delimited) name of this instance's object class.
    *
    * @return the fully-qualified (dot-delimited) name of this instance's object class
    */
    public String getClassName() {
        return get_class_name();
    }

    /**
    * Returns the simple name (last name in its fully-qualified dot-delimited name)
    * of this instance's object class.
    *
    * @return the simple name of this instance's object class
    */
    public String getSimpleClassName() {
        return get_simple_class_name();
    }

    /**
    * Returns a set containing the names of all of the non-hiddenattributes of an
    * object class instance.
    *
    * @return set containing the names of all of the attributes of an
    * object class instance
    */
    public Set< String > getAttributeNames() {
        return get_attribute_names();
    }

    /**
    * Returns a set containing the names of all of the attributes of an
    * object class instance.
    *
    * @return set containing the names of all of the attributes of an
    * object class instance
    */
    public Set< String > getAllAttributeNames() {
        return get_all_attribute_names();
    }

    @Override
    public String getAttributeName(int datamemberHandle) {
        if (datamemberHandle == _11BiD_handle) return "11BiD";
        else if (datamemberHandle == _18BiD_handle) return "18BiD";
        else if (datamemberHandle == _ACKslot_handle) return "ACKslot";
        else if (datamemberHandle == _CRC_handle) return "CRC";
        else if (datamemberHandle == _DLC_handle) return "DLC";
        else if (datamemberHandle == _DataField_handle) return "DataField";
        else if (datamemberHandle == _EndOfFrame_handle) return "EndOfFrame";
        else if (datamemberHandle == _IDE_handle) return "IDE";
        else if (datamemberHandle == _IFS_handle) return "IFS";
        else if (datamemberHandle == _RTR_handle) return "RTR";
        else if (datamemberHandle == _ReservedBit1_handle) return "ReservedBit1";
        else if (datamemberHandle == _ReservedBit2_handle) return "ReservedBit2";
        else if (datamemberHandle == _SRR_handle) return "SRR";
        else if (datamemberHandle == _StartOfFrame_handle) return "StartOfFrame";
        else return super.getAttributeName(datamemberHandle);
    }

    /**
    * Publishes the object class of this instance of the class for a federate.
    *
    * @param rti handle to the Local RTI Component
    */
    public void publishObject(RTIambassador rti) {
        publish(rti);
    }

    /**
    * Unpublishes the object class of this instance of this class for a federate.
    *
    * @param rti handle to the Local RTI Component
    */
    public void unpublishObject(RTIambassador rti) {
        unpublish(rti);
    }

    /**
    * Subscribes a federate to the object class of this instance of this class.
    *
    * @param rti handle to the Local RTI Component
    */
    public void subscribeObject(RTIambassador rti) {
        subscribe(rti);
    }

    /**
    * Unsubscribes a federate from the object class of this instance of this class.
    *
    * @param rti handle to the Local RTI Component
    */
    public void unsubscribeObject(RTIambassador rti) {
        unsubscribe(rti);
    }

    @Override
    public String toString() {
        return getClass().getName() + "("
                + "11BiD:" + get_11BiD()
                + "," + "18BiD:" + get_18BiD()
                + "," + "ACKslot:" + get_ACKslot()
                + "," + "CRC:" + get_CRC()
                + "," + "DLC:" + get_DLC()
                + "," + "DataField:" + get_DataField()
                + "," + "EndOfFrame:" + get_EndOfFrame()
                + "," + "IDE:" + get_IDE()
                + "," + "IFS:" + get_IFS()
                + "," + "RTR:" + get_RTR()
                + "," + "ReservedBit1:" + get_ReservedBit1()
                + "," + "ReservedBit2:" + get_ReservedBit2()
                + "," + "SRR:" + get_SRR()
                + "," + "StartOfFrame:" + get_StartOfFrame()
                + ")";
    }


    /**
    * Publishes the "11BiD" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "11BiD" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_11BiD() {
        _publishAttributeNameSet.add( "11BiD" );
    }

    /**
    * Unpublishes the "11BiD" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "11BiD" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_11BiD() {
        _publishAttributeNameSet.remove( "11BiD" );
    }

    /**
    * Subscribes a federate to the "11BiD" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "11BiD" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_11BiD() {
        _subscribeAttributeNameSet.add( "11BiD" );
    }

    /**
    * Unsubscribes a federate from the "11BiD" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "11BiD" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_11BiD() {
        _subscribeAttributeNameSet.remove( "11BiD" );
    }

    /**
    * Publishes the "18BiD" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "18BiD" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_18BiD() {
        _publishAttributeNameSet.add( "18BiD" );
    }

    /**
    * Unpublishes the "18BiD" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "18BiD" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_18BiD() {
        _publishAttributeNameSet.remove( "18BiD" );
    }

    /**
    * Subscribes a federate to the "18BiD" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "18BiD" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_18BiD() {
        _subscribeAttributeNameSet.add( "18BiD" );
    }

    /**
    * Unsubscribes a federate from the "18BiD" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "18BiD" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_18BiD() {
        _subscribeAttributeNameSet.remove( "18BiD" );
    }

    /**
    * Publishes the "ACKslot" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "ACKslot" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_ACKslot() {
        _publishAttributeNameSet.add( "ACKslot" );
    }

    /**
    * Unpublishes the "ACKslot" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "ACKslot" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_ACKslot() {
        _publishAttributeNameSet.remove( "ACKslot" );
    }

    /**
    * Subscribes a federate to the "ACKslot" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "ACKslot" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_ACKslot() {
        _subscribeAttributeNameSet.add( "ACKslot" );
    }

    /**
    * Unsubscribes a federate from the "ACKslot" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "ACKslot" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_ACKslot() {
        _subscribeAttributeNameSet.remove( "ACKslot" );
    }

    /**
    * Publishes the "CRC" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "CRC" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_CRC() {
        _publishAttributeNameSet.add( "CRC" );
    }

    /**
    * Unpublishes the "CRC" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "CRC" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_CRC() {
        _publishAttributeNameSet.remove( "CRC" );
    }

    /**
    * Subscribes a federate to the "CRC" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "CRC" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_CRC() {
        _subscribeAttributeNameSet.add( "CRC" );
    }

    /**
    * Unsubscribes a federate from the "CRC" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "CRC" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_CRC() {
        _subscribeAttributeNameSet.remove( "CRC" );
    }

    /**
    * Publishes the "DLC" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "DLC" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_DLC() {
        _publishAttributeNameSet.add( "DLC" );
    }

    /**
    * Unpublishes the "DLC" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "DLC" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_DLC() {
        _publishAttributeNameSet.remove( "DLC" );
    }

    /**
    * Subscribes a federate to the "DLC" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "DLC" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_DLC() {
        _subscribeAttributeNameSet.add( "DLC" );
    }

    /**
    * Unsubscribes a federate from the "DLC" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "DLC" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_DLC() {
        _subscribeAttributeNameSet.remove( "DLC" );
    }

    /**
    * Publishes the "DataField" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "DataField" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_DataField() {
        _publishAttributeNameSet.add( "DataField" );
    }

    /**
    * Unpublishes the "DataField" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "DataField" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_DataField() {
        _publishAttributeNameSet.remove( "DataField" );
    }

    /**
    * Subscribes a federate to the "DataField" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "DataField" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_DataField() {
        _subscribeAttributeNameSet.add( "DataField" );
    }

    /**
    * Unsubscribes a federate from the "DataField" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "DataField" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_DataField() {
        _subscribeAttributeNameSet.remove( "DataField" );
    }

    /**
    * Publishes the "EndOfFrame" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "EndOfFrame" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_EndOfFrame() {
        _publishAttributeNameSet.add( "EndOfFrame" );
    }

    /**
    * Unpublishes the "EndOfFrame" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "EndOfFrame" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_EndOfFrame() {
        _publishAttributeNameSet.remove( "EndOfFrame" );
    }

    /**
    * Subscribes a federate to the "EndOfFrame" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "EndOfFrame" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_EndOfFrame() {
        _subscribeAttributeNameSet.add( "EndOfFrame" );
    }

    /**
    * Unsubscribes a federate from the "EndOfFrame" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "EndOfFrame" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_EndOfFrame() {
        _subscribeAttributeNameSet.remove( "EndOfFrame" );
    }

    /**
    * Publishes the "IDE" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "IDE" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_IDE() {
        _publishAttributeNameSet.add( "IDE" );
    }

    /**
    * Unpublishes the "IDE" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "IDE" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_IDE() {
        _publishAttributeNameSet.remove( "IDE" );
    }

    /**
    * Subscribes a federate to the "IDE" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "IDE" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_IDE() {
        _subscribeAttributeNameSet.add( "IDE" );
    }

    /**
    * Unsubscribes a federate from the "IDE" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "IDE" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_IDE() {
        _subscribeAttributeNameSet.remove( "IDE" );
    }

    /**
    * Publishes the "IFS" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "IFS" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_IFS() {
        _publishAttributeNameSet.add( "IFS" );
    }

    /**
    * Unpublishes the "IFS" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "IFS" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_IFS() {
        _publishAttributeNameSet.remove( "IFS" );
    }

    /**
    * Subscribes a federate to the "IFS" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "IFS" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_IFS() {
        _subscribeAttributeNameSet.add( "IFS" );
    }

    /**
    * Unsubscribes a federate from the "IFS" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "IFS" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_IFS() {
        _subscribeAttributeNameSet.remove( "IFS" );
    }

    /**
    * Publishes the "RTR" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "RTR" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_RTR() {
        _publishAttributeNameSet.add( "RTR" );
    }

    /**
    * Unpublishes the "RTR" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "RTR" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_RTR() {
        _publishAttributeNameSet.remove( "RTR" );
    }

    /**
    * Subscribes a federate to the "RTR" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "RTR" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_RTR() {
        _subscribeAttributeNameSet.add( "RTR" );
    }

    /**
    * Unsubscribes a federate from the "RTR" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "RTR" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_RTR() {
        _subscribeAttributeNameSet.remove( "RTR" );
    }

    /**
    * Publishes the "ReservedBit1" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "ReservedBit1" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_ReservedBit1() {
        _publishAttributeNameSet.add( "ReservedBit1" );
    }

    /**
    * Unpublishes the "ReservedBit1" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "ReservedBit1" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_ReservedBit1() {
        _publishAttributeNameSet.remove( "ReservedBit1" );
    }

    /**
    * Subscribes a federate to the "ReservedBit1" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "ReservedBit1" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_ReservedBit1() {
        _subscribeAttributeNameSet.add( "ReservedBit1" );
    }

    /**
    * Unsubscribes a federate from the "ReservedBit1" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "ReservedBit1" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_ReservedBit1() {
        _subscribeAttributeNameSet.remove( "ReservedBit1" );
    }

    /**
    * Publishes the "ReservedBit2" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "ReservedBit2" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_ReservedBit2() {
        _publishAttributeNameSet.add( "ReservedBit2" );
    }

    /**
    * Unpublishes the "ReservedBit2" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "ReservedBit2" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_ReservedBit2() {
        _publishAttributeNameSet.remove( "ReservedBit2" );
    }

    /**
    * Subscribes a federate to the "ReservedBit2" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "ReservedBit2" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_ReservedBit2() {
        _subscribeAttributeNameSet.add( "ReservedBit2" );
    }

    /**
    * Unsubscribes a federate from the "ReservedBit2" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "ReservedBit2" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_ReservedBit2() {
        _subscribeAttributeNameSet.remove( "ReservedBit2" );
    }

    /**
    * Publishes the "SRR" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "SRR" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_SRR() {
        _publishAttributeNameSet.add( "SRR" );
    }

    /**
    * Unpublishes the "SRR" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "SRR" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_SRR() {
        _publishAttributeNameSet.remove( "SRR" );
    }

    /**
    * Subscribes a federate to the "SRR" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "SRR" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_SRR() {
        _subscribeAttributeNameSet.add( "SRR" );
    }

    /**
    * Unsubscribes a federate from the "SRR" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "SRR" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_SRR() {
        _subscribeAttributeNameSet.remove( "SRR" );
    }

    /**
    * Publishes the "StartOfFrame" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "StartOfFrame" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_StartOfFrame() {
        _publishAttributeNameSet.add( "StartOfFrame" );
    }

    /**
    * Unpublishes the "StartOfFrame" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "StartOfFrame" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_StartOfFrame() {
        _publishAttributeNameSet.remove( "StartOfFrame" );
    }

    /**
    * Subscribes a federate to the "StartOfFrame" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "StartOfFrame" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_StartOfFrame() {
        _subscribeAttributeNameSet.add( "StartOfFrame" );
    }

    /**
    * Unsubscribes a federate from the "StartOfFrame" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "StartOfFrame" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_StartOfFrame() {
        _subscribeAttributeNameSet.remove( "StartOfFrame" );
    }

    protected Attribute< String > _11BiD =
            new Attribute< String >(  new String( "" )  );

    /**
    * Set the value of the "11BiD" attribute to "value" for this object.
    *
    * @param value the new value for the "11BiD" attribute
    */
    public void set_11BiD( String value ) {
        _11BiD.setValue( value );
        _11BiD.setTime( getTime() );
    }

    /**
    * Returns the value of the "11BiD" attribute of this object.
    *
    * @return the value of the "11BiD" attribute
    */
    public String get_11BiD() {
        return _11BiD.getValue();
    }

    /**
    * Returns the current timestamp of the "11BiD" attribute of this object.
    *
    * @return the current timestamp of the "11BiD" attribute
    */
    public double get_11BiD_time() {
        return _11BiD.getTime();
    }

    protected Attribute< String > _18BiD =
            new Attribute< String >(  new String( "" )  );

    /**
    * Set the value of the "18BiD" attribute to "value" for this object.
    *
    * @param value the new value for the "18BiD" attribute
    */
    public void set_18BiD( String value ) {
        _18BiD.setValue( value );
        _18BiD.setTime( getTime() );
    }

    /**
    * Returns the value of the "18BiD" attribute of this object.
    *
    * @return the value of the "18BiD" attribute
    */
    public String get_18BiD() {
        return _18BiD.getValue();
    }

    /**
    * Returns the current timestamp of the "18BiD" attribute of this object.
    *
    * @return the current timestamp of the "18BiD" attribute
    */
    public double get_18BiD_time() {
        return _18BiD.getTime();
    }

    protected Attribute< Boolean > _ACKslot =
            new Attribute< Boolean >(  new Boolean( false )  );

    /**
    * Set the value of the "ACKslot" attribute to "value" for this object.
    *
    * @param value the new value for the "ACKslot" attribute
    */
    public void set_ACKslot( boolean value ) {
        _ACKslot.setValue( value );
        _ACKslot.setTime( getTime() );
    }

    /**
    * Returns the value of the "ACKslot" attribute of this object.
    *
    * @return the value of the "ACKslot" attribute
    */
    public boolean get_ACKslot() {
        return _ACKslot.getValue();
    }

    /**
    * Returns the current timestamp of the "ACKslot" attribute of this object.
    *
    * @return the current timestamp of the "ACKslot" attribute
    */
    public double get_ACKslot_time() {
        return _ACKslot.getTime();
    }

    protected Attribute< String > _CRC =
            new Attribute< String >(  new String( "" )  );

    /**
    * Set the value of the "CRC" attribute to "value" for this object.
    *
    * @param value the new value for the "CRC" attribute
    */
    public void set_CRC( String value ) {
        _CRC.setValue( value );
        _CRC.setTime( getTime() );
    }

    /**
    * Returns the value of the "CRC" attribute of this object.
    *
    * @return the value of the "CRC" attribute
    */
    public String get_CRC() {
        return _CRC.getValue();
    }

    /**
    * Returns the current timestamp of the "CRC" attribute of this object.
    *
    * @return the current timestamp of the "CRC" attribute
    */
    public double get_CRC_time() {
        return _CRC.getTime();
    }

    protected Attribute< String > _DLC =
            new Attribute< String >(  new String( "" )  );

    /**
    * Set the value of the "DLC" attribute to "value" for this object.
    *
    * @param value the new value for the "DLC" attribute
    */
    public void set_DLC( String value ) {
        _DLC.setValue( value );
        _DLC.setTime( getTime() );
    }

    /**
    * Returns the value of the "DLC" attribute of this object.
    *
    * @return the value of the "DLC" attribute
    */
    public String get_DLC() {
        return _DLC.getValue();
    }

    /**
    * Returns the current timestamp of the "DLC" attribute of this object.
    *
    * @return the current timestamp of the "DLC" attribute
    */
    public double get_DLC_time() {
        return _DLC.getTime();
    }

    protected Attribute< String > _DataField =
            new Attribute< String >(  new String( "" )  );

    /**
    * Set the value of the "DataField" attribute to "value" for this object.
    *
    * @param value the new value for the "DataField" attribute
    */
    public void set_DataField( String value ) {
        _DataField.setValue( value );
        _DataField.setTime( getTime() );
    }

    /**
    * Returns the value of the "DataField" attribute of this object.
    *
    * @return the value of the "DataField" attribute
    */
    public String get_DataField() {
        return _DataField.getValue();
    }

    /**
    * Returns the current timestamp of the "DataField" attribute of this object.
    *
    * @return the current timestamp of the "DataField" attribute
    */
    public double get_DataField_time() {
        return _DataField.getTime();
    }

    protected Attribute< String > _EndOfFrame =
            new Attribute< String >(  new String( "" )  );

    /**
    * Set the value of the "EndOfFrame" attribute to "value" for this object.
    *
    * @param value the new value for the "EndOfFrame" attribute
    */
    public void set_EndOfFrame( String value ) {
        _EndOfFrame.setValue( value );
        _EndOfFrame.setTime( getTime() );
    }

    /**
    * Returns the value of the "EndOfFrame" attribute of this object.
    *
    * @return the value of the "EndOfFrame" attribute
    */
    public String get_EndOfFrame() {
        return _EndOfFrame.getValue();
    }

    /**
    * Returns the current timestamp of the "EndOfFrame" attribute of this object.
    *
    * @return the current timestamp of the "EndOfFrame" attribute
    */
    public double get_EndOfFrame_time() {
        return _EndOfFrame.getTime();
    }

    protected Attribute< String > _IDE =
            new Attribute< String >(  new String( "" )  );

    /**
    * Set the value of the "IDE" attribute to "value" for this object.
    *
    * @param value the new value for the "IDE" attribute
    */
    public void set_IDE( String value ) {
        _IDE.setValue( value );
        _IDE.setTime( getTime() );
    }

    /**
    * Returns the value of the "IDE" attribute of this object.
    *
    * @return the value of the "IDE" attribute
    */
    public String get_IDE() {
        return _IDE.getValue();
    }

    /**
    * Returns the current timestamp of the "IDE" attribute of this object.
    *
    * @return the current timestamp of the "IDE" attribute
    */
    public double get_IDE_time() {
        return _IDE.getTime();
    }

    protected Attribute< String > _IFS =
            new Attribute< String >(  new String( "" )  );

    /**
    * Set the value of the "IFS" attribute to "value" for this object.
    *
    * @param value the new value for the "IFS" attribute
    */
    public void set_IFS( String value ) {
        _IFS.setValue( value );
        _IFS.setTime( getTime() );
    }

    /**
    * Returns the value of the "IFS" attribute of this object.
    *
    * @return the value of the "IFS" attribute
    */
    public String get_IFS() {
        return _IFS.getValue();
    }

    /**
    * Returns the current timestamp of the "IFS" attribute of this object.
    *
    * @return the current timestamp of the "IFS" attribute
    */
    public double get_IFS_time() {
        return _IFS.getTime();
    }

    protected Attribute< Boolean > _RTR =
            new Attribute< Boolean >(  new Boolean( false )  );

    /**
    * Set the value of the "RTR" attribute to "value" for this object.
    *
    * @param value the new value for the "RTR" attribute
    */
    public void set_RTR( boolean value ) {
        _RTR.setValue( value );
        _RTR.setTime( getTime() );
    }

    /**
    * Returns the value of the "RTR" attribute of this object.
    *
    * @return the value of the "RTR" attribute
    */
    public boolean get_RTR() {
        return _RTR.getValue();
    }

    /**
    * Returns the current timestamp of the "RTR" attribute of this object.
    *
    * @return the current timestamp of the "RTR" attribute
    */
    public double get_RTR_time() {
        return _RTR.getTime();
    }

    protected Attribute< Boolean > _ReservedBit1 =
            new Attribute< Boolean >(  new Boolean( false )  );

    /**
    * Set the value of the "ReservedBit1" attribute to "value" for this object.
    *
    * @param value the new value for the "ReservedBit1" attribute
    */
    public void set_ReservedBit1( boolean value ) {
        _ReservedBit1.setValue( value );
        _ReservedBit1.setTime( getTime() );
    }

    /**
    * Returns the value of the "ReservedBit1" attribute of this object.
    *
    * @return the value of the "ReservedBit1" attribute
    */
    public boolean get_ReservedBit1() {
        return _ReservedBit1.getValue();
    }

    /**
    * Returns the current timestamp of the "ReservedBit1" attribute of this object.
    *
    * @return the current timestamp of the "ReservedBit1" attribute
    */
    public double get_ReservedBit1_time() {
        return _ReservedBit1.getTime();
    }

    protected Attribute< Boolean > _ReservedBit2 =
            new Attribute< Boolean >(  new Boolean( false )  );

    /**
    * Set the value of the "ReservedBit2" attribute to "value" for this object.
    *
    * @param value the new value for the "ReservedBit2" attribute
    */
    public void set_ReservedBit2( boolean value ) {
        _ReservedBit2.setValue( value );
        _ReservedBit2.setTime( getTime() );
    }

    /**
    * Returns the value of the "ReservedBit2" attribute of this object.
    *
    * @return the value of the "ReservedBit2" attribute
    */
    public boolean get_ReservedBit2() {
        return _ReservedBit2.getValue();
    }

    /**
    * Returns the current timestamp of the "ReservedBit2" attribute of this object.
    *
    * @return the current timestamp of the "ReservedBit2" attribute
    */
    public double get_ReservedBit2_time() {
        return _ReservedBit2.getTime();
    }

    protected Attribute< Boolean > _SRR =
            new Attribute< Boolean >(  new Boolean( false )  );

    /**
    * Set the value of the "SRR" attribute to "value" for this object.
    *
    * @param value the new value for the "SRR" attribute
    */
    public void set_SRR( boolean value ) {
        _SRR.setValue( value );
        _SRR.setTime( getTime() );
    }

    /**
    * Returns the value of the "SRR" attribute of this object.
    *
    * @return the value of the "SRR" attribute
    */
    public boolean get_SRR() {
        return _SRR.getValue();
    }

    /**
    * Returns the current timestamp of the "SRR" attribute of this object.
    *
    * @return the current timestamp of the "SRR" attribute
    */
    public double get_SRR_time() {
        return _SRR.getTime();
    }

    protected Attribute< Boolean > _StartOfFrame =
            new Attribute< Boolean >(  new Boolean( false )  );

    /**
    * Set the value of the "StartOfFrame" attribute to "value" for this object.
    *
    * @param value the new value for the "StartOfFrame" attribute
    */
    public void set_StartOfFrame( boolean value ) {
        _StartOfFrame.setValue( value );
        _StartOfFrame.setTime( getTime() );
    }

    /**
    * Returns the value of the "StartOfFrame" attribute of this object.
    *
    * @return the value of the "StartOfFrame" attribute
    */
    public boolean get_StartOfFrame() {
        return _StartOfFrame.getValue();
    }

    /**
    * Returns the current timestamp of the "StartOfFrame" attribute of this object.
    *
    * @return the current timestamp of the "StartOfFrame" attribute
    */
    public double get_StartOfFrame_time() {
        return _StartOfFrame.getTime();
    }

    protected CAN( ReflectedAttributes datamemberMap, boolean initFlag ) {
        super( datamemberMap, false );
        if ( initFlag ) setAttributes( datamemberMap );
    }

    protected CAN( ReflectedAttributes datamemberMap, LogicalTime logicalTime, boolean initFlag ) {
        super( datamemberMap, logicalTime, false );
        if ( initFlag ) setAttributes( datamemberMap );
    }

    /**
    * Creates an instance of the CAN object class, using
    * "datamemberMap" to initialize its attribute values.
    * "datamemberMap" is usually acquired as an argument to an RTI federate
    * callback method, such as "receiveInteraction".
    *
    * @param datamemberMap data structure containing initial values for the
    * attributes of this new CAN object class instance
    */
    public CAN( ReflectedAttributes datamemberMap ) {
        this( datamemberMap, true );
    }

    /**
    * Like {@link #CAN( ReflectedAttributes datamemberMap )}, except this
    * new CAN object class instance is given a timestamp of
    * "logicalTime".
    *
    * @param datamemberMap data structure containing initial values for the
    * attributes of this new CAN object class instance
    * @param logicalTime timestamp for this new CAN object class
    * instance
    */
    public CAN( ReflectedAttributes datamemberMap, LogicalTime logicalTime ) {
        this( datamemberMap, logicalTime, true );
    }

    /**
    * Creates a new CAN object class instance that is a duplicate
    * of the instance referred to by CAN_var.
    *
    * @param CAN_var CAN object class instance of which
    * this newly created CAN object class instance will be a
    * duplicate
    */
    public CAN( CAN CAN_var ) {
        super( CAN_var );

        set_11BiD( CAN_var.get_11BiD() );
        set_18BiD( CAN_var.get_18BiD() );
        set_ACKslot( CAN_var.get_ACKslot() );
        set_CRC( CAN_var.get_CRC() );
        set_DLC( CAN_var.get_DLC() );
        set_DataField( CAN_var.get_DataField() );
        set_EndOfFrame( CAN_var.get_EndOfFrame() );
        set_IDE( CAN_var.get_IDE() );
        set_IFS( CAN_var.get_IFS() );
        set_RTR( CAN_var.get_RTR() );
        set_ReservedBit1( CAN_var.get_ReservedBit1() );
        set_ReservedBit2( CAN_var.get_ReservedBit2() );
        set_SRR( CAN_var.get_SRR() );
        set_StartOfFrame( CAN_var.get_StartOfFrame() );
    }

    /**
    * Returns the value of the attribute whose name is "datamemberName"
    * for this object.
    *
    * @param datamemberName name of attribute whose value is to be
    * returned
    * @return value of the attribute whose name is "datamemberName"
    * for this object
    */
    public Object getAttribute( String datamemberName ) {
        if ( "11BiD".equals(datamemberName) ) return get_11BiD();
        else if ( "18BiD".equals(datamemberName) ) return get_18BiD();
        else if ( "ACKslot".equals(datamemberName) ) return new Boolean(get_ACKslot());
        else if ( "CRC".equals(datamemberName) ) return get_CRC();
        else if ( "DLC".equals(datamemberName) ) return get_DLC();
        else if ( "DataField".equals(datamemberName) ) return get_DataField();
        else if ( "EndOfFrame".equals(datamemberName) ) return get_EndOfFrame();
        else if ( "IDE".equals(datamemberName) ) return get_IDE();
        else if ( "IFS".equals(datamemberName) ) return get_IFS();
        else if ( "RTR".equals(datamemberName) ) return new Boolean(get_RTR());
        else if ( "ReservedBit1".equals(datamemberName) ) return new Boolean(get_ReservedBit1());
        else if ( "ReservedBit2".equals(datamemberName) ) return new Boolean(get_ReservedBit2());
        else if ( "SRR".equals(datamemberName) ) return new Boolean(get_SRR());
        else if ( "StartOfFrame".equals(datamemberName) ) return new Boolean(get_StartOfFrame());
        else return super.getAttribute( datamemberName );
    }

    protected boolean setAttributeAux( String datamemberName, String val ) {
        boolean retval = true;
        if ( "11BiD".equals( datamemberName) ) set_11BiD( val );
        else if ( "18BiD".equals( datamemberName) ) set_18BiD( val );
        else if ( "ACKslot".equals( datamemberName) ) set_ACKslot( Boolean.parseBoolean(val) );
        else if ( "CRC".equals( datamemberName) ) set_CRC( val );
        else if ( "DLC".equals( datamemberName) ) set_DLC( val );
        else if ( "DataField".equals( datamemberName) ) set_DataField( val );
        else if ( "EndOfFrame".equals( datamemberName) ) set_EndOfFrame( val );
        else if ( "IDE".equals( datamemberName) ) set_IDE( val );
        else if ( "IFS".equals( datamemberName) ) set_IFS( val );
        else if ( "RTR".equals( datamemberName) ) set_RTR( Boolean.parseBoolean(val) );
        else if ( "ReservedBit1".equals( datamemberName) ) set_ReservedBit1( Boolean.parseBoolean(val) );
        else if ( "ReservedBit2".equals( datamemberName) ) set_ReservedBit2( Boolean.parseBoolean(val) );
        else if ( "SRR".equals( datamemberName) ) set_SRR( Boolean.parseBoolean(val) );
        else if ( "StartOfFrame".equals( datamemberName) ) set_StartOfFrame( Boolean.parseBoolean(val) );
        else retval = super.setAttributeAux( datamemberName, val );

        return retval;
    }

    protected boolean setAttributeAux( String datamemberName, Object val ) {
        boolean retval = true;
        if ( "11BiD".equals( datamemberName) ) set_11BiD( (String)val );
        else if ( "18BiD".equals( datamemberName) ) set_18BiD( (String)val );
        else if ( "ACKslot".equals( datamemberName) ) set_ACKslot( (Boolean)val );
        else if ( "CRC".equals( datamemberName) ) set_CRC( (String)val );
        else if ( "DLC".equals( datamemberName) ) set_DLC( (String)val );
        else if ( "DataField".equals( datamemberName) ) set_DataField( (String)val );
        else if ( "EndOfFrame".equals( datamemberName) ) set_EndOfFrame( (String)val );
        else if ( "IDE".equals( datamemberName) ) set_IDE( (String)val );
        else if ( "IFS".equals( datamemberName) ) set_IFS( (String)val );
        else if ( "RTR".equals( datamemberName) ) set_RTR( (Boolean)val );
        else if ( "ReservedBit1".equals( datamemberName) ) set_ReservedBit1( (Boolean)val );
        else if ( "ReservedBit2".equals( datamemberName) ) set_ReservedBit2( (Boolean)val );
        else if ( "SRR".equals( datamemberName) ) set_SRR( (Boolean)val );
        else if ( "StartOfFrame".equals( datamemberName) ) set_StartOfFrame( (Boolean)val );
        else retval = super.setAttributeAux( datamemberName, val );

        return retval;
    }

    @Override
    protected SuppliedAttributes createSuppliedDatamembers(boolean force) {
        SuppliedAttributes datamembers = _factory.createSuppliedAttributes();
 
        if (_publishAttributeNameSet.contains("11BiD") && _11BiD.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("11BiD"), getAttribute("11BiD").toString().getBytes() );
            _11BiD.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("18BiD") && _18BiD.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("18BiD"), getAttribute("18BiD").toString().getBytes() );
            _18BiD.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("ACKslot") && _ACKslot.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("ACKslot"), getAttribute("ACKslot").toString().getBytes() );
            _ACKslot.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("CRC") && _CRC.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("CRC"), getAttribute("CRC").toString().getBytes() );
            _CRC.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("DLC") && _DLC.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("DLC"), getAttribute("DLC").toString().getBytes() );
            _DLC.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("DataField") && _DataField.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("DataField"), getAttribute("DataField").toString().getBytes() );
            _DataField.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("EndOfFrame") && _EndOfFrame.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("EndOfFrame"), getAttribute("EndOfFrame").toString().getBytes() );
            _EndOfFrame.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("IDE") && _IDE.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("IDE"), getAttribute("IDE").toString().getBytes() );
            _IDE.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("IFS") && _IFS.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("IFS"), getAttribute("IFS").toString().getBytes() );
            _IFS.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("RTR") && _RTR.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("RTR"), getAttribute("RTR").toString().getBytes() );
            _RTR.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("ReservedBit1") && _ReservedBit1.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("ReservedBit1"), getAttribute("ReservedBit1").toString().getBytes() );
            _ReservedBit1.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("ReservedBit2") && _ReservedBit2.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("ReservedBit2"), getAttribute("ReservedBit2").toString().getBytes() );
            _ReservedBit2.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("SRR") && _SRR.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("SRR"), getAttribute("SRR").toString().getBytes() );
            _SRR.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("StartOfFrame") && _StartOfFrame.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("StartOfFrame"), getAttribute("StartOfFrame").toString().getBytes() );
            _StartOfFrame.setHasBeenUpdated();
        }

        return datamembers;
    }

    public void copyFrom( Object object ) {
        super.copyFrom( object );
        if ( object instanceof CAN ) {
            CAN data = (CAN)object;
            _11BiD = data._11BiD;
            _18BiD = data._18BiD;
            _ACKslot = data._ACKslot;
            _CRC = data._CRC;
            _DLC = data._DLC;
            _DataField = data._DataField;
            _EndOfFrame = data._EndOfFrame;
            _IDE = data._IDE;
            _IFS = data._IFS;
            _RTR = data._RTR;
            _ReservedBit1 = data._ReservedBit1;
            _ReservedBit2 = data._ReservedBit2;
            _SRR = data._SRR;
            _StartOfFrame = data._StartOfFrame;
        }
    }
}

